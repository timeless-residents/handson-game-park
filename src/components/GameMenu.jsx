import { useState, useRef, useEffect, useMemo, useCallback } from "react";
import NyankoJump from "./NyankoJump";
import LizardGame from "./LizardGame";
import DIYHouseGame from "./DIYHouseGame";
import CandyRocketGame from "./CandyRocketGame";
import HeartRunnerGame from "./HeartRunnerGame";
import ShakaShakaNukaZukeGame from "./ShakaShakaNukaZukeGame";
import RainbowHammockRelayGame from "./RainbowHammockRelayGame";
import MiniFieldHockeyGame from "./MiniFieldHockeyGame";
import SDGRunner from "./SDGRunner";
import GondolaGame from "./GondolaGame";
import PopupBookGame from "./PopupBookGame";
import PuchiBubbleLift from "./PuchiBubbleLift";
import TurtleCrossingGame from "./TurtleCrossingGame";

const GameMenu = () => {
  const [selectedGame, setSelectedGame] = useState(null);
  const [focusedGameIndex, setFocusedGameIndex] = useState(0);
  const gameButtonsRef = useRef([]);
  const gameContainerRef = useRef(null);

  const games = useMemo(
    () => [
      {
        id: "turtle-crossing",
        title: "„Ç´„É°„ÅÆ„ÅÆ„Çì„Å≥„Çä„ÇØ„É≠„Çπ",
        emoji: "üê¢",
        description: "Áü¢Âç∞„Ç≠„Éº„ÅßÂ∑ù„ÇíÊ∏°„Çä„ÄÅ„Çπ„Éö„Éº„Çπ„Ç≠„Éº„ÅßÁî≤ÁæÖ„Å´„Åì„ÇÇ„Å£„Å¶Âç±Èô∫„ÇíÂõûÈÅø„Åô„Çã„ÄÇ",
        component: TurtleCrossingGame,
      },
      {
        id: "puchi-bubble-lift",
        title: "„Å∑„Å°„Å∑„Å°„Éê„Éñ„É´„É™„Éï„Éà",
        emoji: "ü´ß",
        description: "Áü¢Âç∞„Ç≠„Éº„ÅßÊ≥°„ÇíÊìç‰Ωú„Åó„Å¶ÈöúÂÆ≥Áâ©„ÇíÈÅø„Åë„ÄÅ„Çπ„Éö„Éº„Çπ„Ç≠„Éº„ÅßÊ≥°„ÅÆ„Çµ„Ç§„Ç∫„ÇíÂ§âÊõ¥„Åô„Çã",
        component: PuchiBubbleLift,
      },
      {
        id: "popup-book",
        title: "„Å®„Å≥„Å†„ÅôÁµµÊú¨„ÅÆÂõΩ",
        emoji: "üìö",
        description: "Áü¢Âç∞„Ç≠„Éº„ÅßÁ´ã‰ΩìÂåñ„Åï„Çå„ÅüÁµµÊú¨„ÇíÈÄ≤„Åø„ÄÅ„Çπ„Éö„Éº„Çπ„Ç≠„Éº„ÅßÈ£õ„Å≥Âá∫„Åô‰ªïÊéõ„Åë„ÇíÈÅø„Åë„Çã„ÄÇ",
        component: PopupBookGame,
      },
      {
        id: "gondora",
        title: "„Ç¥„É≥„Éâ„É©„Ç≤„Éº„É†",
        emoji: "üö°",
        description: "„Ç¥„É≥„Éâ„É©„ÇíÊìç‰Ωú„Åó„Å¶ÁõÆÁöÑÂú∞„Å´Âà∞ÈÅî„Åó„Çà„ÅÜÔºÅ",
        component: GondolaGame,
      },
      {
        id: "tree-fort",
        title: "SDGs„Éí„Éº„É≠„Éº",
        emoji: "üåè",
        description:
          "SDGs„ÅÆÁõÆÊ®ô„ÇíÈÅîÊàê„Åô„Çã„Åü„ÇÅ„Å´„ÄÅSDGs„Éí„Éº„É≠„Éº„ÅåÊßò„ÄÖ„Å™„Éü„Éã„Ç≤„Éº„É†„Å´ÊåëÊà¶„Åó„Åæ„Åô„ÄÇ",
        component: SDGRunner, // Êñ∞„Åó„ÅèËøΩÂä†
      },
      {
        id: "mini-field-hockey",
        title: "„Éü„Éã„Éï„Ç£„Éº„É´„Éâ„Éõ„ÉÉ„Ç±„Éº",
        emoji: "üèë",
        description:
          "Áü¢Âç∞„Ç≠„Éº„Åß„Éõ„ÉÉ„Ç±„Éº„Çπ„ÉÜ„Ç£„ÉÉ„ÇØ„ÇíÊìç‰Ωú„Åó„ÄÅ„Çπ„Éö„Éº„Çπ„Ç≠„Éº„Åß„Éú„Éº„É´„ÇíÊâì„Å£„Å¶„Ç¥„Éº„É´„ÇíÁãô„ÅÜ",
        component: MiniFieldHockeyGame,
      },
      {
        id: "rainbow-hangmat-relay",
        title: "ËôπËâ≤„Éè„É≥„É¢„ÉÉ„ÇØ„É™„É¨„Éº",
        emoji: "üåà",
        description: "Áü¢Âç∞„Ç≠„Éº„ÅßÁßªÂãï„Åó„ÄÅ„Çπ„Éö„Éº„Çπ„Ç≠„Éº„Åß„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíË°å„ÅÜ",
        component: RainbowHammockRelayGame,
      },
      {
        id: "shaka-nuka-zuke",
        title: "„Ç∑„É£„Ç´„Ç∑„É£„Ç´„Å¨„ÅãÊº¨„Åë",
        emoji: "üçÜ",
        description: "Áü¢Âç∞„Ç≠„Éº„ÅßÈáéËèú„ÇíÂÖ•„Çå„ÄÅ„Çπ„Éö„Éº„Çπ„Ç≠„Éº„Åß„Å¨„ÅãÂ∫ä„Çí„Åã„ÅçÊ∑∑„Åú„Çã",
        component: ShakaShakaNukaZukeGame,
      },
      {
        id: "heart-runner",
        title: "„Éè„Éº„ÉàÈõÜ„ÇÅ„É©„É≥„Éä„Éº",
        emoji: "üèÉ‚Äç‚ôÄÔ∏è",
        description: "Ëµ∞„Çä„Å™„Åå„Çâ„Éè„Éº„Éà„ÇíÈõÜ„ÇÅ„Å¶„Çπ„Ç≥„Ç¢„ÇíÁ´∂„Åä„ÅÜÔºÅ",
        component: HeartRunnerGame,
      },
      {
        id: "candy-rocket",
        title: "„Ç≠„É£„É≥„Éá„Ç£„É≠„Ç±„ÉÉ„Éà‰ΩìÊìç",
        emoji: "üöÄ",
        description:
          "Áü¢Âç∞„Ç≠„Éº„Åß„Ç≠„É£„É≥„Éá„Ç£„ÇíÁÇπÁÅ´‰ΩçÁΩÆ„Å´ÁΩÆ„Åç„ÄÅ„Çπ„Éö„Éº„Çπ„Ç≠„Éº„ÅßÁô∫Â∞Ñ„Åó„Å¶Á©∫‰∏≠„ÅÆÊòü„ÇíÂèñ„Çã",
        component: CandyRocketGame,
      },
      {
        id: "diy",
        title: "Êú®„ÅÆÊùø„Éà„É≥„Éà„É≥DIY",
        emoji: "üî®",
        description:
          "Áü¢Âç∞„Ç≠„Éº„ÅßÊùø„ÇíÁßªÂãï„Åó„ÄÅ„Çπ„Éö„Éº„Çπ„Ç≠„Éº„ÅßÈáò„ÇíÊâì„Å£„Å¶„Åä„ÅÜ„Å°„ÇíÂÆåÊàê„Åï„Åõ„Çã",
        component: DIYHouseGame,
      },
      {
        id: "lizard",
        title: "„Éà„Ç´„Ç≤„ÅÆ„Åõ„Çì„Å∑„ÅÜÊ©ü‰πó„Çä",
        emoji: "ü¶é",
        description: "Â£Å„ÇíÁôª„Å£„Å¶ÊòÜËô´„Çí„Ç≠„É£„ÉÉ„ÉÅ„Åó„Çà„ÅÜÔºÅ",
        component: LizardGame,
      },
      {
        id: "nyanko",
        title: "„Å´„ÇÉ„Çì„Åì„Ç∏„É£„É≥„Éó",
        emoji: "üò∫",
        description: "È≠ö„ÇíÈõÜ„ÇÅ„Å™„Åå„Çâ„Ç∏„É£„É≥„Éó„ÅßÂÜíÈô∫„Åó„Çà„ÅÜÔºÅ",
        component: NyankoJump,
      },
    ],
    []
  );

  // „Éú„Çø„É≥ÂèÇÁÖß„ÅÆÈÖçÂàó„Çígames„ÅÆÊï∞„Å´Âêà„Çè„Åõ„Çã
  useEffect(() => {
    gameButtonsRef.current = gameButtonsRef.current.slice(0, games.length);
  }, [games]);

  const handleKeyDown = useCallback(
    (e) => {
      if (selectedGame) {
        if (e.key === "Escape") {
          setSelectedGame(null);
        }
        return;
      }

      if (
        [
          "ArrowLeft",
          "ArrowRight",
          "ArrowUp",
          "ArrowDown",
          "Enter",
          " ",
        ].includes(e.key)
      ) {
        e.preventDefault();
      }

      if (e.key === "ArrowLeft" || e.key === "ArrowUp") {
        setFocusedGameIndex((prevIndex) =>
          prevIndex > 0 ? prevIndex - 1 : games.length - 1
        );
      } else if (e.key === "ArrowRight" || e.key === "ArrowDown") {
        setFocusedGameIndex((prevIndex) =>
          prevIndex < games.length - 1 ? prevIndex + 1 : 0
        );
      } else if (e.key === "Enter" || e.key === " ") {
        setSelectedGame(games[focusedGameIndex].id);
      }
    },
    [selectedGame, focusedGameIndex, games]
  );

  // „Ç≤„Éº„É†ÈÅ∏ÊäûÊôÇ„Å´„Çπ„ÇØ„É≠„Éº„É´„Çí„Éà„ÉÉ„Éó„Å´Êàª„Åô
  useEffect(() => {
    if (selectedGame) {
      window.scrollTo(0, 0);
    }
  }, [selectedGame]);

  // „Ç≤„Éº„É†„É°„Éã„É•„Éº„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Å®„Åç„ÄÅfocusedGameIndex„Å´Âêà„Çè„Åõ„Å¶„Éú„Çø„É≥„Å´„Éï„Ç©„Éº„Ç´„Çπ„Åô„Çã
  useEffect(() => {
    if (!selectedGame && gameButtonsRef.current[focusedGameIndex]) {
      gameButtonsRef.current[focusedGameIndex].focus();
    }
  }, [selectedGame, focusedGameIndex]);

  // windowÂÖ®‰Ωì„Åß„Ç≠„Éº„Éú„Éº„Éâ„Ç§„Éô„É≥„Éà„ÇíÁõ£Ë¶ñ„Åô„Çã
  useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [handleKeyDown]);

  if (selectedGame) {
    const GameComponent = games.find(
      (game) => game.id === selectedGame
    )?.component;
    return (
      <div
        className="fixed inset-0 bg-white overflow-auto"
        ref={gameContainerRef}
      >
        {GameComponent ? (
          <div className="min-h-screen">
            <GameComponent />
          </div>
        ) : (
          <p>„Ç≤„Éº„É†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</p>
        )}
        <button
          onClick={() => setSelectedGame(null)}
          className="fixed top-4 right-4 bg-white/80 hover:bg-white text-gray-800 px-4 py-2 rounded-full shadow-lg z-20 transition-colors"
          onFocus={() => setFocusedGameIndex(0)}
        >
          „Ç≤„Éº„É†ÈÅ∏Êäû„Å´Êàª„Çã
        </button>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-purple-400 to-purple-600 flex items-center justify-center p-4">
      <div className="text-center w-full">
        <h1 className="text-4xl md:text-5xl font-bold text-white mb-8 md:mb-12 drop-shadow-lg">
          „Éü„Éã„Ç≤„Éº„É†ÈÅ∏Êäû
        </h1>
        <div className="grid gap-4 md:gap-6 md:grid-cols-2 max-w-4xl mx-auto">
          {games.map((game, index) => (
            <button
              key={game.id}
              onClick={() => setSelectedGame(game.id)}
              className={`bg-white/90 hover:bg-white rounded-xl p-4 md:p-6 text-center transition-all transform hover:scale-105 shadow-lg ${
                focusedGameIndex === index ? "ring-4 ring-purple-500" : ""
              }`}
              ref={(el) => (gameButtonsRef.current[index] = el)}
              onFocus={() => setFocusedGameIndex(index)}
            >
              <div className="text-5xl md:text-7xl mb-2 md:mb-4">
                {game.emoji}
              </div>
              <h2 className="text-xl md:text-2xl font-bold mb-2 text-gray-800">
                {game.title}
              </h2>
              <p className="text-sm md:text-base text-gray-600">
                {game.description}
              </p>
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};

export default GameMenu;
